{
    "Id": "10-46-49-04-97-1F-8D-C8-BE-7E-AE-BF-96-B4-10-DC-8C-67-7A-AE-7C-FE-8C-5D-DF-7F-67-ED-73-6E-E3-03",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "025: Effective Java for Android developers : Item 7",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>In this mini Fragment, we introduce Joshua's seventh Item and a momentous end to the first chapter: <strong>Avoid finalizers</strong></p>\n<p>Stay tuned for more items from our <a href=\"http://fragmentedpodcast.com/category/effective-java/\">&quot;Effective Java for Android developers&quot; Fragment series</a>.</p>\n<h2>Show Notes</h2>\n<ul>\n<li><a href=\"http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/?tag=httpkaushco-20\">Effective Java (2nd Edition) - Joshua Bloch</a></li>\n</ul>\n<p><strong>Avoid finalizers</strong></p>\n<ul>\n<li>If you don't know what they are, ignorance is bliss. If you know what they are, avoid them!</li>\n<li>Finalizers in Java != destructors in C++ (C++ counterparts to constructors).</li>\n<li>In C++ destructors\n<ul>\n<li>you reclaim resources here (Java has GC)</li>\n<li>you also reclaim non-memory resources (use the try-finally block in Java)</li>\n</ul>\n</li>\n<li>(unpredicatable amt of time between object becoming unreachable and finalizer being executed) Never do anything time critical in finalizer!\n<ul>\n<li>System.gc + System.runFinalization increase chances - no guarantee</li>\n<li>System.runFinalizersOnExit + Runtime.runFinalizersOnExit are the ones that do - but they are fatally flawed</li>\n</ul>\n</li>\n<li>Java 7 has <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">try with resources</a>, which is also interesting and <a href=\"http://examples.javacodegeeks.com/core-java/java-autocloseable-interface-example/\">auto-closeables</a>. [Android] devs can only dream of these.</li>\n<li>If an uncaught exception is thrown in a finalizer, it is ignored, and the finalization abruptly terminates.</li>\n<li>Severe performance penalty for using finalizers - (one e.g.) time to create and destroy simple object goes from 5.6ns -&gt; 2400ns</li>\n<li>Only valid use: as a safety net or to terminate noncritical native resources.</li>\n<li>[Android] you're probably better off using Android's lifecycle methods.</li>\n</ul>\n<h2>Contact</h2>\n<ul>\n<li><a href=\"https://twitter.com/fragmentedcast\">@fragmentedcast</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/donnfelker\">@donnfelker</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/kaushikgopal/\">@kaushikgopal</a> [twitter.com]</li>\n</ul>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/0073d8ad-ff29-49db-8b2b-9d6d48728400/025_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}