{
    "Id": "E0-70-38-DE-69-40-99-A5-21-1E-5A-E7-92-6A-78-81-0A-1B-43-56-2B-41-C0-5D-08-79-2E-DC-8F-43-3A-E6",
    "ContentSourceId": "425b36ab-3b93-42c9-8cbc-032e3bddb1d6",
    "Title": "Continuing to Unravel Python's Syntactic Sugar With Brett Cannon",
    "SourceUrl": "https://realpython.com/podcasts/rpp/92/",
    "Description": "<p>A year ago, we had Brett Cannon on the show to discuss his blog series about unravelling Python&rsquo;s syntactic sugar. Brett has written 15 more entries in the series, and he returns to the show this week to continue our conversation. We dive into unravelling &lsquo;async&rsquo; and &lsquo;await&rsquo; statements and their relationship with Python&rsquo;s generators.</p>\n<p>While working through the series, he has uncovered some issues lying under the surface of CPython. We discuss a couple of these discoveries and how the core developers resolved them.</p>\n<p>Brett was recently re-elected to the Python Steering Council, and he talks about how the current direction of the council is shifting. We also discuss how Brett uses Twitter polls to gauge community sentiment and factors it into development decisions.</p>\n<p>This conversation covered so many topics that we split it into two episodes. Next week&rsquo;s episode will continue our discussion.</p>\n<div class=\"alert alert-primary\" role=\"alert\">\n<p><strong>Course Spotlight:</strong> <a href=\"https://realpython.com/courses/speed-python-concurrency/\">Speed Up Python With Concurrency</a> </p>\n<p>Learn what concurrency means in Python and why you might want to use it. You&rsquo;ll see a simple, non-concurrent approach and then look into why you&rsquo;d want threading, asyncio, or multiprocessing.</p>\n</div>\n<p>Topics:</p>\n<ul>\n<li>00:00:00 &ndash; Introduction</li>\n<li>00:01:54 &ndash; Python Steering Council Reelection</li>\n<li>00:06:06 &ndash; Python Extension for VSCode and the Language Server Protocol (LSP)</li>\n<li>00:10:38 &ndash; Using twitter polls to gauge sentiment</li>\n<li>00:19:19 &ndash; Sponsor: Honeybadger</li>\n<li>00:20:04 &ndash; Unravelling Python&rsquo;s syntactic sugar series </li>\n<li>00:25:30 &ndash; The desugar GitHub repo and unearthing problems in CPython</li>\n<li>00:29:48 &ndash; Why have <code>__iter__()</code> for an iterator?</li>\n<li>00:32:47 &ndash; Is discovering and showcasing these &ldquo;issues&rdquo; stressful?</li>\n<li>00:35:19 &ndash; A reverse chronology of some Python features</li>\n<li>00:38:34 &ndash; How the heck does async/await work in Python</li>\n<li>00:51:29 &ndash; Video Course Spotlight</li>\n<li>00:52:54 &ndash; Using &ldquo;spam&rdquo; vs &ldquo;foo&rdquo; and metasyntactic variables</li>\n<li>00:57:30 &ndash; Goodbye</li>\n</ul>\n<p>Show Links:</p>\n<ul>\n<li><a href=\"https://discuss.python.org/t/2022-python-steering-council-election-results/12581\">2022 Python Steering Council Election Results - Python.org</a></li>\n<li><a href=\"https://microsoft.github.io/language-server-protocol/\">Official Page for Language Server Protocol</a></li>\n<li><a href=\"https://twitter.com/brettsky/status/1471264518885937152\">Brett Cannon on Twitter: &ldquo;If I were creating a protocol/interface for a spammy object, what naming convention would you expect?&rdquo;</a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/88/\">Episode #88: Discussing Type Hints, Protocols, and Ducks in Python \u2013 The Real Python Podcast</a></li>\n<li><a href=\"https://twitter.com/brettsky/status/1471227326797021185\">Brett Cannon - Twitter Poll: &ldquo;Which of these &lsquo;pip install&rsquo; flags to you usually specify?&rdquo;</a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/47/\">Episode #47: Unraveling Python&rsquo;s Syntax to Its Core With Brett Cannon \u2013 The Real Python Podcast</a></li>\n<li><a href=\"https://snarky.ca/unravelling-break-and-continue/\">Unravelling &lsquo;break&rsquo; and &lsquo;continue&rsquo;</a></li>\n<li><a href=\"https://snarky.ca/unravelling-for-statements/\">Unravelling &lsquo;for&rsquo; statements</a></li>\n<li><a href=\"https://github.com/brettcannon/desugar\">GitHub - brettcannon/desugar: Unravelling Python source code</a></li>\n<li><a href=\"https://snarky.ca/a-reverse-chronology-of-some-python-features/\">A reverse chronology of some Python features</a></li>\n<li><a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">What Color is Your Function? \u2013 journal.stuffwithstuff.com</a></li>\n<li><a href=\"https://snarky.ca/unravelling-async-and-await/\">Unravelling &lsquo;async&rsquo; and &lsquo;await&rsquo;</a></li>\n<li><a href=\"https://snarky.ca/how-the-heck-does-async-await-work-in-python-3-5/\">How the heck does async/await work in Python 3.5?</a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/39/\">Episode #39: Generators, Coroutines, and Learning Python Through Exercises \u2013 The Real Python Podcast</a></li>\n<li><a href=\"https://realpython.com/introduction-to-python-generators/\">How to Use Generators and yield in Python \u2013 Real Python</a></li>\n<li><a href=\"https://realpython.com/async-io-python/\">Async IO in Python: A Complete Walkthrough \u2013 Real Python</a></li>\n</ul>\n<p>Level up your Python skills with our expert-led courses:</p>\n<ul>\n<li><a href=\"https://realpython.com/courses/python-for-loop/\">For Loops in Python (Definite Iteration)</a></li>\n<li><a href=\"https://realpython.com/courses/python-generators/\">Python Generators 101</a></li>\n<li><a href=\"https://realpython.com/courses/speed-python-concurrency/\">Speed Up Python With Concurrency</a></li>\n</ul> <p><a rel=\"payment\" href=\"https://realpython.com/join\">Support the podcast &amp; join our community of Pythonistas</a></p>",
    "EnclosureUrl": "https://dts.podtrac.com/redirect.mp3/files.realpython.com/podcasts/RPP_E092_Brett_Part_1.4d27cfcbc2c3.mp3"
}