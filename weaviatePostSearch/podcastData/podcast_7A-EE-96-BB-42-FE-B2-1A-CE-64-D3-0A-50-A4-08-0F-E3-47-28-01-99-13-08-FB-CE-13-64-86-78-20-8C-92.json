{
    "Id": "7A-EE-96-BB-42-FE-B2-1A-CE-64-D3-0A-50-A4-08-0F-E3-47-28-01-99-13-08-FB-CE-13-64-86-78-20-8C-92",
    "ContentSourceId": "f8b5d0b7-9181-43a4-8fab-d3e2b2c93d0a",
    "Title": "SE Radio 644: Tim McNamara on Error Handling in Rust",
    "SourceUrl": "http://se-radio.net/se-radio-643-tim-mcnamara-on-error-handling-in-rust",
    "Description": "<p>Tim McNamara, a well-known Rust educator, author of <em>Rust in Action</em> (Manning), and a recipient of a Rust Foundation Fellowship in 2023, speaks with SE Radio host <a class=\"css-1rn59kg\" title= \"https://se-radio.net/team/gavin-henry/\" href= \"https://trello.com/team/gavin-henry/\" data-testid= \"link-with-safety\" data-renderer-mark=\"true\">Gavin Henry</a> about error handling in Rust. They discuss the errors that Rust prevents, what an error is in Rust, what Tim classes as the \"four levels of error handling,\" and the lifecycle of your journey reaching for them.</p> <p>McNamara explains why Rust handles errors as it does, how it differs from other languages, and what the developer experience is like in dealing with Rust errors. He advocates best practices for error handling, what\u00a0Result is, the power of Rust Enums, what the question mark operator is, when to unwrap, what Box really means, how to deal with errors across the FFI boundary, and the various Rust error-handling crates that you can use to give you more control.</p> <p>Brought to you by\u00a0<a href=\"https://www.computer.org\" target=\"_blank\" rel=\"noopener\">IEEE Computer Society</a> and <a href=\"https://www.computer.org/software\" target=\"_blank\" rel= \"noopener\">IEEE Software magazine</a>.</p>",
    "EnclosureUrl": "https://traffic.libsyn.com/secure/seradio/644-tim-Mcnamara-error-handling-rust.mp3?dest-id=23379"
}