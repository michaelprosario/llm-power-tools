{
    "Id": "12-C7-C7-65-0D-5C-17-7A-05-67-09-FA-0E-1D-34-EB-9E-B8-A7-C8-2E-9D-C3-38-05-0D-9D-BF-89-65-45-46",
    "ContentSourceId": "425b36ab-3b93-42c9-8cbc-032e3bddb1d6",
    "Title": "Going Beyond requirements.txt With pylock.toml and PEP 751",
    "SourceUrl": "https://realpython.com/podcasts/rpp/249/",
    "Description": "<p>What is the best way to record the Python dependencies for the reproducibility of your projects? What advantages will lock files provide for those projects? This week on the show, we welcome back Python Core Developer Brett Cannon to discuss his journey to bring PEP 751 and the pylock.toml file format to the community.</p>\n<p>Brett has been working on a way to move beyond the <code>requirements.txt</code> file for over six years. He was on the show previously to discuss his work on PEP 665, which was rejected. He decided to continue to push forward, authoring PEP 751 last year, which was accepted at the end of March this year.</p>\n<p>The PEP calls for a new file format to record your project&rsquo;s dependencies. The goal was to have a standardized immutable record for what should be installed to reproduce your project in a virtual environment. He discusses working with other packaging projects and the compromises involved in creating a standard.</p>\n<div class=\"alert alert-primary\" role=\"alert\">\n<p><strong>Course Spotlight:</strong> <a href=\"https://realpython.com/courses/python-subprocess-module/\">Using the Python subprocess Module</a> </p>\n<p>In this video course, you&rsquo;ll learn how to use Python&rsquo;s subprocess module to run and control external programs from your scripts. You&rsquo;ll start with launching basic processes and progress to interacting with them as they execute.</p>\n</div>\n<p>Topics:</p>\n<ul>\n<li>00:00:00 &ndash; Introduction</li>\n<li>00:02:38 &ndash; Brett&rsquo;s roles within the Python community</li>\n<li>00:05:41 &ndash; How to move beyond requirement.txt?</li>\n<li>00:10:58 &ndash; What does the community use as project artifacts?</li>\n<li>00:15:28 &ndash; Building on the success of pyproject.toml</li>\n<li>00:17:44 &ndash; Introducing PEP 665</li>\n<li>00:19:49 &ndash; Software Bills of Materials and security</li>\n<li>00:25:20 &ndash; Back to lock files and security</li>\n<li>00:31:08 &ndash; Video Course Spotlight</li>\n<li>00:32:27 &ndash; Not giving up on the idea</li>\n<li>00:34:01 &ndash; Leading into PEP 751</li>\n<li>00:38:54 &ndash; Working toward a single multi-platform file</li>\n<li>00:43:02 &ndash; The final push</li>\n<li>00:48:54 &ndash; Leaving room for flexibility</li>\n<li>00:53:50 &ndash; And it&rsquo;s done, PEP 751 accepted unconditionally</li>\n<li>00:58:06 &ndash; Keynote speaker at EuroPython 2025</li>\n<li>00:58:45 &ndash; What are uv workspaces?</li>\n<li>01:01:02 &ndash; Considering the use of lock files in data science</li>\n<li>01:05:23 &ndash; Updates about Python for WASI and Emscripten</li>\n<li>01:13:51 &ndash; Clarification on WASI </li>\n<li>01:20:28 &ndash; Future conversation about Python launcher</li>\n<li>01:23:04 &ndash; What are you excited about in the world of Python?</li>\n<li>01:24:25 &ndash; What do you want to learn next?</li>\n<li>01:28:41 &ndash; What&rsquo;s the best way to follow your work online?</li>\n<li>01:31:00 &ndash; Thanks and goodbye</li>\n</ul>\n<p>Show Links:</p>\n<ul>\n<li><a href=\"https://snarky.ca/\">Tall, Snarky Canadian</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wgxBHuUOmjA\">BREAKING: Guido van Rossum Returns as Python&rsquo;s BDFL - YouTube</a></li>\n<li><a href=\"https://packaging.python.org/en/latest/\">Python Packaging User Guide</a></li>\n<li><a href=\"https://peps.python.org/pep-0751/\">PEP 751 \u2013 A file format to record Python dependencies for installation reproducibility</a></li>\n<li><a href=\"https://peps.python.org/pep-0665/#file-format\">PEP 665 \u2013 A file format to list Python dependencies for reproducibility of an application</a></li>\n<li><a href=\"https://packaging.python.org/en/latest/specifications/pylock-toml/#pylock-toml-spec\">pylock.toml Specification - Python Packaging User Guide</a></li>\n<li><a href=\"https://packaging.python.org/en/latest/specifications/inline-script-metadata/\">Inline script metadata - Python Packaging User Guide</a></li>\n<li><a href=\"https://peps.python.org/pep-0723/\">PEP 723 \u2013 Inline script metadata</a></li>\n<li><a href=\"https://docs.astral.sh/uv/concepts/projects/workspaces/\">Using workspaces - uv</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=UTduy7Qkvk8\">Do you have a flag? - Eddie Izzard - YouTube</a></li>\n<li><a href=\"http://www.openmathlib.org/OpenBLAS/\">OpenBLAS : An optimized BLAS library</a></li>\n<li><a href=\"https://ep2025.europython.eu/\">EuroPython 2025 - July 14 to 20, 2025 - Prague, Czech Republic &amp; Remote</a></li>\n<li><a href=\"https://bytecodealliance.org/\">Bytecode Alliance</a></li>\n<li><a href=\"https://bytecodealliance.zulipchat.com/\">Recent conversations - Bytecode Alliance - Zulip</a></li>\n<li><a href=\"https://snarky.ca/my-impressions-of-gleam/\">My impressions of Gleam</a></li>\n<li><a href=\"https://snarky.ca/my-impressions-of-rescript/\">My impressions of ReScript</a></li>\n<li><a href=\"https://exercism.org/tracks/python\">Python on Exercism</a></li>\n<li><a href=\"https://letterboxd.com/nothingbutsnark/films/\">Brett Cannon&rsquo;s Films - Letterboxd</a></li>\n<li><a href=\"https://opensource.snarky.ca/About+Me/Media+I+Like\">Media I Like - Open Source by Brett Cannon</a></li>\n<li><a href=\"https://bsky.app/profile/snarky.ca\">Brett Cannon (@snarky.ca) \u2014 Bluesky</a></li>\n<li><a href=\"https://fosstodon.org/@brettcannon\">Brett Cannon (@brettcannon@fosstodon.org) - Fosstodon</a></li>\n</ul>\n<p>Level up your Python skills with our expert-led courses:</p>\n<ul>\n<li><a href=\"https://realpython.com/courses/basics-exercises-install-packages-with-pip/\">Python Basics Exercises: Installing Packages With pip</a></li>\n<li><a href=\"https://realpython.com/courses/packaging-with-pyproject-toml/\">Everyday Project Packaging With pyproject.toml</a></li>\n<li><a href=\"https://realpython.com/courses/python-subprocess-module/\">Using the Python subprocess Module</a></li>\n</ul> <p><a rel=\"payment\" href=\"https://realpython.com/join\">Support the podcast &amp; join our community of Pythonistas</a></p>",
    "EnclosureUrl": "https://dts.podtrac.com/redirect.mp3/files.realpython.com/podcasts/RPP_E249_03_BrettCannon.e0b00ccb4b8e.mp3"
}