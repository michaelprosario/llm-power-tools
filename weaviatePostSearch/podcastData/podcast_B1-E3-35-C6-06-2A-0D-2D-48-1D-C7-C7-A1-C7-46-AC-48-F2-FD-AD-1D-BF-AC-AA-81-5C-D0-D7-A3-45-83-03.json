{
    "Id": "B1-E3-35-C6-06-2A-0D-2D-48-1D-C7-C7-A1-C7-46-AC-48-F2-FD-AD-1D-BF-AC-AA-81-5C-D0-D7-A3-45-83-03",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "115: Architecture Components with Akshay Chordiya",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>In this episode, we talk about the different parts of Android architecture components. We've had episodes on Room and the paging library, so in this one, we thought we'll touch a little on Lifecycle Owners &amp; Observers, ViewModels, and LiveData. Akshay Chordiya helps break it down. Listen on!</p>\n<h2>Show Notes</h2>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/index.html\">Android Architecture Components</a></li>\n</ul>\n<h3>Lifecycle</h3>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle.html\">Handling lifecycles with Lifecycle-Aware Components</a></li>\n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/LifecycleOwner.html\">Lifecycle Owner</a></li>\n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/LifecycleObserver.html\">Lifecycle Observer</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle.html#lc-bp\">Best practices for lifecycle-aware components</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle.html#onStop-and-savedState\">Caveat: handling onStop events</a></li>\n</ul>\n<h3>ViewModels</h3>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel.html\">Architecture Guide: ViewModels</a></li>\n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html\">View Model</a></li>\n</ul>\n<p>Code snippet for a ViewModelFactory:</p>\n<pre><code>    class UserVMFactory(\n            val user: MyUser\n    ) : ViewModelProvider.Factory {\n        override fun  create(modelClass: Class): T {\n            return when {\n                modelClass.isAssignableFrom(UserVM::class.java) -&gt;\n                    UserVM(user) as T\n                else -&gt; throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)\n            }\n        }\n    }\n</code></pre>\n<h3>LiveData</h3>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/LiveData.html\">Live Data</a></li>\n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/MediatorLiveData.html\">MediatorLiveData</a></li>\n</ul>\n<h3>Misc</h3>\n<ul>\n<li><a href=\"https://caster.io/courses/android-architecture-components-deep-dive\">Android Architecture Components Deep Dive Course on Caster.IO</a></li>\n<li><a href=\"http://fragmentedpodcast.com/episodes/95/\">Fragmented - Room episode with Florina</a></li>\n<li><a href=\"http://fragmentedpodcast.com/episodes/97/\">Fragmented - AAC Paging library with Florina</a></li>\n</ul>\n<h2>Sponsors</h2>\n<ul>\n<li><a href=\"http://appcenter.ms/\">Microsoft AppCenter</a> - Sign up now on appcenter.ms and spend less time managing your app lifecycle and more time coding.</li>\n</ul>\n<h2>Contact</h2>\n<ul>\n<li><a href=\"https://twitter.com/Akshay_Chordiya\">@Akshay_Chordiya</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/fragmentedcast\">@fragmentedcast</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/donnfelker\">@donnfelker</a> and <a href=\"https://www.instagram.com/donnfelker/\">\ud83d\udcf7 donnfelker</a></li>\n<li><a href=\"https://twitter.com/kaushikgopal/\">@kaushikgopal</a> and <a href=\"https://www.instagram.com/kaushikgopal/\">\ud83d\udcf7 kaushikgopal</a></li>\n</ul>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/01f853a6-5fe9-484c-a64f-7fa4698f4de1/115-architecture-components-w-akshay-chordiya_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}