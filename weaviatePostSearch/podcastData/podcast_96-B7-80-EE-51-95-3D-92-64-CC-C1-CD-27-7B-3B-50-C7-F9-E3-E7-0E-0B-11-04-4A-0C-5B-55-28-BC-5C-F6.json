{
    "Id": "96-B7-80-EE-51-95-3D-92-64-CC-C1-CD-27-7B-3B-50-C7-F9-E3-E7-0E-0B-11-04-4A-0C-5B-55-28-BC-5C-F6",
    "ContentSourceId": "425b36ab-3b93-42c9-8cbc-032e3bddb1d6",
    "Title": "Creating a Python Code Completer & More Abstract Syntax Tree Projects",
    "SourceUrl": "https://realpython.com/podcasts/rpp/123/",
    "Description": "<p>How does a code completion tool work? What is an Abstract Syntax Tree, and how is it created in Python? How does an AST help you write programs and projects that inspect and modify your Python code? This week on the show, Meredydd Luff, co-founder of Anvil, shares his PyCon talk, &ldquo;Building a Python Code Completer.&rdquo;</p>\n<p>Meredydd talks about his experience building a code completion engine for the Anvil platform. The conversation leads us to discuss how Python parses the code that you type. We examine tokenization, abstract syntax trees, and how parsing has changed in Python.</p>\n<p>We cover additional projects that you can explore once you have a tool that inspects the Python code you&rsquo;re writing. Join us as we dive into multiple rabbit holes of research and exploration.</p>\n<div class=\"alert alert-primary\" role=\"alert\">\n<p><strong>Course Spotlight:</strong>  <a href=\"https://realpython.com/courses/python-assignment-expressions-walrus-operator/\">Python Assignment Expressions and Using the Walrus Operator</a></p>\n<p>In this course, you&rsquo;ll learn about assignment expressions and the walrus operator. The biggest change in Python 3.8 was the inclusion of the <code>:=</code> operator, which you can use to assign variables in the middle of expressions. You&rsquo;ll see several examples of how to take advantage of this feature.</p>\n</div>\n<p>Topics:</p>\n<ul>\n<li>00:00:00 &ndash; Introduction</li>\n<li>00:02:11 &ndash; Building a Python Code Completer - Talk</li>\n<li>00:08:48 &ndash; How is recursion being used?</li>\n<li>00:10:28 &ndash; Abstract Syntax Trees, Parsers, and Tokens</li>\n<li>00:14:58 &ndash; Sponsor: CData Software</li>\n<li>00:15:39 &ndash; Is parsing into tokens a separate step?</li>\n<li>00:21:45 &ndash; What makes the new PEG parser unique?</li>\n<li>00:25:32 &ndash; Using the AST doesn&rsquo;t have to be scary.</li>\n<li>00:27:33 &ndash; More on the PEG parser </li>\n<li>00:29:54 &ndash; Keeping scope and holding completions</li>\n<li>00:39:43 &ndash; Video Course Spotlight</li>\n<li>00:41:15 &ndash; Was this your first expirement in creating a code completer?</li>\n<li>00:46:46 &ndash; How can adding type hints assist a completer?</li>\n<li>00:50:53 &ndash; Projects you can build using AST</li>\n<li>00:53:02 &ndash; Linter project</li>\n<li>00:54:15 &ndash; Automatic code formatter</li>\n<li>00:54:59 &ndash; Code testing and the pytest project</li>\n<li>00:56:22 &ndash; Security tools</li>\n<li>00:57:11 &ndash; Friendlier tracebacks</li>\n<li>00:59:57 &ndash; Code completion vs GitHub Copilot</li>\n<li>01:04:14 &ndash; Code completion in a text editor vs IDE</li>\n<li>01:08:53 &ndash; What are you excited about in the world of Python?</li>\n<li>01:09:54 &ndash; What do you want to learn next?</li>\n<li>01:11:20 &ndash; How can people follow your work?</li>\n<li>01:12:31 &ndash; Thanks and goodbye</li>\n</ul>\n<p>Show Links:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=aRO7DkJrA_c\">Talk - Meredydd Luff: Building a Python Code Completer - YouTube</a></li>\n<li><a href=\"https://anvil.works/\">Anvil | Build Web Apps with Nothing but Python</a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/63/\">Episode #63: Create Web Applications Using Only Python With Anvil \u2013 The Real Python Podcast</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QppWTvh7_sI\">&ldquo;Writing a PEG parser for fun and profit&rdquo; - Guido van Rossum (North Bay Python 2019) - YouTube</a></li>\n<li><a href=\"https://medium.com/@gvanrossum_83706/peg-parsing-series-de5d41b2ed60\">PEG Parsing Series Overview. My series of blog posts about PEG | by Guido van Rossum</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">Abstract syntax tree - Wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Parse_tree\">Parse tree - Wikipedia</a></li>\n<li><a href=\"https://docs.python.org/3/library/ast.html?highlight=parse#\">ast \u2014 Abstract Syntax Trees \u2014 Python 3.10.6 documentation</a></li>\n<li><a href=\"https://docs.python.org/3/reference/grammar.html\">Full Grammar specification \u2014 Python 3.10.6 documentation</a></li>\n<li><a href=\"https://python-ast-explorer.com/\">Python AST Explorer</a></li>\n<li><a href=\"https://greentreesnakes.readthedocs.io/en/latest/examples.html\">Examples of working with ASTs \u2014 Green Tree Snakes 1.0 documentation</a></li>\n<li><a href=\"https://github.com/hchasestevens/bellybutton\">bellybutton: Custom Python linting through AST expressions</a></li>\n<li><a href=\"https://pypi.org/project/black/\">black \u00b7 PyPI</a></li>\n<li><a href=\"https://docs.pytest.org/en/7.1.x/\">pytest: helps you write better programs \u2014 pytest documentation</a></li>\n<li><a href=\"https://github.com/friendly-traceback/friendly-traceback\">friendly-traceback: Friendlier Python tracebacks.</a></li>\n<li><a href=\"https://www.raspberrypi.com/products/raspberry-pi-pico/?variant=raspberry-pi-pico-w\">Raspberry Pi Pico \u2013 Raspberry Pi</a></li>\n<li><a href=\"https://www.adafruit.com/product/5526\">Raspberry Pi Pico W : ID 5526 : $6.00 : Adafruit Industries, Unique &amp; fun DIY electronics and kits</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/State_management\">State management - Wikipedia</a></li>\n<li><a href=\"https://recoiljs.org/\">Recoil</a></li>\n<li><a href=\"https://twitter.com/meredydd\">Meredydd Luff (@meredydd) / Twitter</a></li>\n</ul>\n<p>Level up your Python skills with our expert-led courses:</p>\n<ul>\n<li><a href=\"https://realpython.com/courses/python-assignment-expressions-walrus-operator/\">Python Assignment Expressions and Using the Walrus Operator</a></li>\n<li><a href=\"https://realpython.com/courses/testing-your-code-with-pytest/\">Testing Your Code With pytest</a></li>\n<li><a href=\"https://realpython.com/courses/writing-beautiful-python-code-pep-8/\">Writing Beautiful Pythonic Code With PEP 8</a></li>\n</ul> <p><a rel=\"payment\" href=\"https://realpython.com/join\">Support the podcast &amp; join our community of Pythonistas</a></p>",
    "EnclosureUrl": "https://dts.podtrac.com/redirect.mp3/files.realpython.com/podcasts/RPP_E123_03_ads.5c8f3e12d209.mp3"
}