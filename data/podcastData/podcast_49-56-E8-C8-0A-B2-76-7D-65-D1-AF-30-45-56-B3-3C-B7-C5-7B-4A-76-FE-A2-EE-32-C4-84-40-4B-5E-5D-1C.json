{
    "Id": "49-56-E8-C8-0A-B2-76-7D-65-D1-AF-30-45-56-B3-3C-B7-C5-7B-4A-76-FE-A2-EE-32-C4-84-40-4B-5E-5D-1C",
    "ContentSourceId": "7c098d5f-afc6-488d-b7ac-b49867303173",
    "Title": "How Do We Protect the Software Supply Chain?",
    "SourceUrl": "https://thenewstack.simplecast.com/episodes/how-do-we-protect-the-software-supply-chain-zgvH9Sg7",
    "Description": "<p>DETROIT \u2014 Modern software projects\u2019 emphasis on agility and building community has caused a lot of security best practices, developed in the early days of the Linux kernel, to fall by the wayside, according to <a href=\"https://www.linkedin.com/in/aevaonline\">Aeva Black, </a>an open source veteran of 25 years.</p><p>\u00a0</p><p>\u201cAnd now we're playing catch up,\u201c said Black, an open source hacker in Microsoft Azure\u2019s Office of the CTO \u00a0\u201cA lot of less than ideal practices have taken root in the past five years. We're trying to help educate everybody now.\u201d</p><p>\u00a0</p><p><a href=\"https://www.linkedin.com/in/thechrisshort\">Chris Short,</a> senior developer advocate with Amazon Web Services (AWS), challenged the notion of \u201cshifting left\u201d and giving developers greater responsibility for security. \u201cIf security is everybody's job, it's nobody's job,\u201d said Short, founder of the DevOps-ish newsletter.</p><p>\u00a0</p><p>\u201cWe've gone through this evolution: just develop secure code, and you'll be fine,\u201d he said. \u201cThere's no such thing as secure code. There are errors in the underlying languages sometimes \u2026. There's no such thing as secure software. So you have to mitigate and then be ready to defend against coming vulnerabilities.\u201d</p><p>\u00a0</p><p>Black and Short talked about the state of the software supply chain\u2019s security in an On the Road episode of The New Stack Makers podcast.</p><p>\u00a0</p><p>Their conversation with Heather Joslyn, features editor of TNS, was recorded at KubeCon + CloudNativeCon North America here in the Motor City.</p><p>\u00a0</p><p>This podcast episode was sponsored by AWS.</p><p><h2>\u2018Trust, but Verify\u2019</h2></p><p>For our podcast guests, \u201ctrust, but verify\u201d is a slogan more organizations need to live by.</p><p>\u00a0</p><p>A lot of the security problems that plague the software supply chain, Black said, are companies \u2014\u00a0especially smaller organizations \u2014\u00a0\u201cjust pulling software directly from upstream. They trust a build someone's published, they don't verify, they don't check the hash, they don't check a signature, they just download a Docker image or binary from somewhere and run it in production.\u201d</p><p>\u00a0</p><p>That practice, Black said, \u201cexposes them to anything that's changed upstream. If upstream has a bug or a network error in that repository, then they can't update as well.\u201d Organizations, they said, should maintain an internal staging environment where they can verify code retrieved from upstream before pushing it to production \u2014 or rebuild it, in case a vulnerability is found, and push it back upstream.</p><p>\u00a0</p><p>That build environment should also be firewalled, Short added: \u201cCreate those safeguards of, \u2018Oh, you want to pull a package from not an approved source or not a trusted source? Sorry, not gonna happen.\u2019\u201d</p><p>\u00a0</p><p>Being able to rebuild code that has vulnerabilities to make it more secure \u2014\u00a0or even being able to identify what\u2019s wrong, and quickly \u2014 are skills that not enough developers have, the podcast guests noted.</p><p>\u00a0</p><p>More automation is part of the solution, Short said. But, he added, by itself it's not enough. \u201cContinuous learning is what we do here as a job,\" he said. \"If you're kind of like, this is my skill set, this is my toolbox and I'm not willing to grow past that, you\u2019re setting yourself up for failure, right? So you have to be able to say, almost at a moment's notice, \u2018I need to change something across my entire environment. How do I do that?\u2019\u201d</p><p><h2>GitBOM and the \u2018Signal-to-Noise Ratio\u2019</h2></p><p>As both Black and Short said during our conversation, there\u2019s no such thing as perfectly secure code. And even such highly touted tools as <a href=\"https://thenewstack.io/how-to-create-a-software-bill-of-materials/\">software bills of materials, or SBOMs, </a>fall short of giving teams all the information they need to determine code\u2019s safety.</p><p>\u00a0</p><p>\u201cMany projects have dependencies 10, 20 30 layers deep,\u201d Black said. \u201cAnd so if your SBOM only goes one or two layers, you just don't have enough information to know if as a vulnerability five or 10 layers down.\u201d</p><p>\u00a0</p><p>Short brought up another issue with SBOMs: \u201cThere's nothing you can act on. The biggest thing for Ops teams or security teams is actionable information.\u201d</p><p>\u00a0</p><p>While Short applauded recent efforts to improve user education, he said he\u2019s pessimistic about the state of cybersecurity: \u201cThere\u2019s not a lot right now that's getting people actionable data. It's a lot of noise still, and we need to refine these systems well enough to know that, like, just because I have Bash doesn't necessarily mean I have every vulnerability in Bash.\u201d</p><p>\u00a0</p><p>One project aimed at addressing the situation is <a href=\"https://gitbom.dev/\">GitBOM,</a> a new open source initiative. \u201cFundamentally, I think it\u2019s the best bet we have to provide really high fidelity signal to defense teams,\u201d said Black, who has worked on the project and <a href=\"https://gitbom.dev/resources/whitepaper/\">produced a white paper on it this past January.</a></p><p>\u00a0</p><p>GitBOM \u2014 the name will likely be changed, Black said \u2014takes the underlying technology that Git relies on, using a hash table to track changes in a project's code over time, and reapplies it to track the supply chain of software. The technology is used to build a hash table connecting all of the dependencies in a project and building what GItBOM\u2019s creators call an artifact dependency graph.</p><p>\u00a0</p><p>\u201cWe had a team working on it a couple of proof of concepts right now,\u201d Black said. \u201cAnd the main effect I'm hoping to achieve from this is a small change in every language and compiler \u2026 then we can get traceability across the whole supply chain.\u201d</p><p>\u00a0</p><p>In the meantime, Short said, there\u2019s plenty of room for broader adoption of the best practtices that currently exist. \u201cSecurity vendors, I feel, \u00a0like need to do a better job of moving teams in the right direction as far as action,\u201d he said.</p><p>\u00a0</p><p>At DevOps Chicago this fall, Short said, he ran an open space session in which he asked participants for their pain points related to working with containers</p><p>\u00a0</p><p>\u201cAnd the whole room admitted to not using least privilege, not using policy engines that are available in the Kubernetes space,\u201d he said. \u201cSo there's a lot of complexity that we\u2019ve got to help people understand the need for it, and how to implement it.\u201d</p><p>\u00a0</p><p>Listen to whole podcast to learn more about the state of software supply chain security.</p>\n",
    "EnclosureUrl": "https://afp-922713-injected.calisto.simplecastaudio.com/5672b58f-7201-4e0e-b0af-da702259d97f/episodes/19b2f68c-b1e7-4c60-88ea-8ccb75e352a9/audio/128/default.mp3?aid=rss_feed&awCollectionId=5672b58f-7201-4e0e-b0af-da702259d97f&awEpisodeId=19b2f68c-b1e7-4c60-88ea-8ccb75e352a9&feed=IgzWks06"
}