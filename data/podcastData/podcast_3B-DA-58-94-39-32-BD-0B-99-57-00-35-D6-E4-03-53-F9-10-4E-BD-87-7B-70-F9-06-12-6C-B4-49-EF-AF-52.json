{
    "Id": "3B-DA-58-94-39-32-BD-0B-99-57-00-35-D6-E4-03-53-F9-10-4E-BD-87-7B-70-F9-06-12-6C-B4-49-EF-AF-52",
    "ContentSourceId": "425b36ab-3b93-42c9-8cbc-032e3bddb1d6",
    "Title": "Targeting WebAssembly Platforms & Distilling a Minimum Viable Python",
    "SourceUrl": "https://realpython.com/podcasts/rpp/154/",
    "Description": "<p>Are you familiar with the different versions of WebAssembly? Could WASM be the &ldquo;write once, run everywhere&rdquo; solution that developers have searched for? Where does distributing Python applications fit in the narrative? This week on the show, we have CPython core developer Brett Cannon to discuss his recent articles about WebAssembly and MVPy.</p>\n<p>Brett has completed his syntactic sugar series, which we discussed in a previous episode. He details the origin of the series and his process of unearthing a minimum viable version of Python. Brett shares how he updated his PyCon US talk on the subject after feedback from presenting it at PyCascades.</p>\n<p>We also dig deep into WebAssembly, specifically WebAssembly System Interface (WASI). Brett explains the concept of a  &ldquo;platform target triple&rdquo; and the importance of defining which system CPython is compiled for. We also discuss WebAssembly becoming a ubiquitous distribution system.</p>\n<div class=\"alert alert-primary\" role=\"alert\">\n<p><strong>Course Spotlight:</strong> <a href=\"https://realpython.com/courses/python-basics-class/\">Python Basics: Building Systems With Classes</a></p>\n<p>In this video course, you&rsquo;ll learn how to work with classes to build complex systems in Python. By composing classes, inheriting from other classes, and overriding class behavior, you&rsquo;ll harness the power of object-oriented programming (OOP).</p>\n</div>\n<p>Topics:</p>\n<ul>\n<li>00:00:00 &ndash; Introduction</li>\n<li>00:02:05 &ndash; PyCascades 2023 </li>\n<li>00:02:56 &ndash; Using social media for polls and checking interest</li>\n<li>00:06:02 &ndash; Completing the syntactic sugar blog series</li>\n<li>00:15:29 &ndash; Minimum Viable Python (MVPy) and WebAssembly</li>\n<li>00:19:29 &ndash; Other teams focusing on WebAssembly</li>\n<li>00:21:31 &ndash; Sponsor: Courier</li>\n<li>00:22:13 &ndash; Stack of technology</li>\n<li>00:26:50 &ndash; WebAssembly and its platform targets</li>\n<li>00:32:35 &ndash; WASI and connecting to a runtime</li>\n<li>00:38:33 &ndash; Extension modules and dynamic libraries</li>\n<li>00:47:29 &ndash; Overcoming road blocks and envisioning a new WASI assignment</li>\n<li>00:51:51 &ndash; Video Course Spotlight</li>\n<li>00:53:26 &ndash; PEP 11 &amp; CPython platform support for WASI</li>\n<li>01:03:11 &ndash; Machine-specific runtime </li>\n<li>01:04:57 &ndash; Write once, run everywhere</li>\n<li>01:13:14 &ndash; Talks and summits planned for PyCon 2023</li>\n<li>01:18:00 &ndash; Thanks and goodbye</li>\n</ul>\n<p>Show Links:</p>\n<ul>\n<li><a href=\"https://snarky.ca/mvpy-minimum-viable-python/\">MVPy: Minimum Viable Python</a></li>\n<li><a href=\"https://us.pycon.org/2023/schedule/presentation/41/\">Python&rsquo;s Syntactic Sugar - PyCon US 2023</a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/47/\">Episode #47: Unraveling Python&rsquo;s Syntax to Its Core With Brett Cannon \u2013 The Real Python Podcast</a></li>\n<li><a href=\"https://snarky.ca/tag/syntactic-sugar/\">syntactic sugar - Tall, Snarky Canadian</a></li>\n<li><a href=\"https://fosstodon.org/@brettcannon\">Brett Cannon (@brettcannon@fosstodon.org) - Fosstodon</a></li>\n<li><a href=\"https://wasi.dev/\">WASI - wasi.dev</a></li>\n<li><a href=\"https://snarky.ca/webassembly-and-its-platform-targets/\">WebAssembly and its platform targets</a></li>\n<li><a href=\"https://medium.com/disney-streaming/introducing-the-disney-application-development-kit-adk-ad85ca139073\">Introducing the Disney+ Application Development Kit (ADK) - Mike Hanley</a></li>\n<li><a href=\"https://developer.fastly.com/learning/compute/\">Compute@Edge services using WebAssembly - Fastly Developer Hub</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-python-web-wasm&amp;ssr=false#overview\">Experimental - Python for the Web - Visual Studio Marketplace</a></li>\n<li><a href=\"https://peps.python.org/pep-0011/\">PEP 11 \u2013 CPython platform support - peps.python.org</a></li>\n<li><a href=\"https://snarky.ca/testing-a-project-using-the-wasi-build-of-cpython-with-pytest/\">Testing a Python project using the WASI build of CPython with <code>pytest</code></a></li>\n<li><a href=\"https://www.infoworld.com/article/3651503/the-rise-of-webassembly.html\">The rise of WebAssembly - InfoWorld</a></li>\n<li><a href=\"https://adlrocha.substack.com/p/adlrocha-can-wasm-become-the-new\">Can WASM become the new Docker?</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime\">bytecodealliance/wasmtime: A fast and secure runtime for WebAssembly</a></li>\n<li><a href=\"https://emscripten.org/\">Emscripten - Dev Documentation</a></li>\n<li><a href=\"https://pyscript.net/\">PyScript - Run Python in your HTML</a></li>\n</ul>\n<p>Level up your Python skills with our expert-led courses:</p>\n<ul>\n<li><a href=\"https://realpython.com/courses/python-basics-oop/\">Python Basics: Object-Oriented Programming</a></li>\n<li><a href=\"https://realpython.com/courses/inheritance-composition-python/\">Inheritance and Composition: A Python OOP Guide</a></li>\n<li><a href=\"https://realpython.com/courses/python-basics-class/\">Python Basics: Building Systems With Classes</a></li>\n</ul> <p><a rel=\"payment\" href=\"https://realpython.com/join\">Support the podcast &amp; join our community of Pythonistas</a></p>",
    "EnclosureUrl": "https://dts.podtrac.com/redirect.mp3/files.realpython.com/podcasts/RPP_E154_03_Brett.66966432e726.mp3"
}