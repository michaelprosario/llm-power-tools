{
    "Id": "DA-17-1C-3E-31-A0-72-5D-9E-E1-3A-74-8D-D0-29-49-AA-7D-31-4C-7B-CD-D0-49-AE-26-B8-12-BB-5B-F9-97",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "093: RxJava intervention with Dan Lew",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>In this episode of Fragmented, our friend and RxJava paragon of the Android - Dan Lew, returns for a record 3 and 1/2 time.</p>\n<p>We've been using RxJava over the years now and have even talked to Dan about it in previous episodes.</p>\n<p>How has our understanding of Rx use in Android changed over the years? We know some of the super standard usecases for RxJava in AndroidDev. But the important question to be asking is: when are the times we &quot;shouldn't&quot; be using RxJava? Are we over-complicating our code by shoe-horning it in different places. Concepts like functional programming and reactive state management have picked up steam again, how has this influenced our RxJava use?</p>\n<h2>Show Notes</h2>\n<ul>\n<li><a href=\"http://fragmentedpodcast.com/episodes/3/\">Fragmented Ep.3 Dan Lew - The RxJava show (Part 1)</a></li>\n<li><a href=\"http://fragmentedpodcast.com/episodes/4/\">Fragmented Ep.4 Dan Lew - The RxJava show (Part 2)</a></li>\n<li><a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html\">Futures in Java (7)</a></li>\n<li><a href=\"https://github.com/square/sqlbrite\">SqlBrite - lighteweight Rx wrapper for SQLiteOpenHelper</a></li>\n<li><a href=\"http://blog.danlew.net/2015/12/08/error-handling-in-rxjava/\">Error handling with RxJava - Dan Lew</a></li>\n<li><a href=\"https://github.com/j256/ormlite-android\">OrmLite - Android</a></li>\n<li><a href=\"http://blog.danlew.net/2017/08/02/why-not-rxlifecycle/\">Why not RxLifecycle</a></li>\n<li><a href=\"https://twitter.com/kaushikgopal/status/892917432104361986\">Tweet quote - boilerplate is ok</a></li>\n<li><a href=\"http://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/\">Introduction to Functional Reactive Programming</a></li>\n</ul>\n<h2>Sponsors</h2>\n<p>This episode is made possible by <a href=\"https://kobiton.com/freetrial/?utm_source=Fragmented%20Podcast&amp;utm_medium=Fragmented&amp;utm_campaign=Fragmented%20Podcast&amp;utm_content=no%20commitment%20free%20trial\">Kobiton - Fragmented</a>.</p>\n<p>They're giving listeners a <strong>15 day FREE trial</strong> with no credit card required! \ud83d\ude4c<br />\nGive them a try at <a href=\"https://kobiton.com/freetrial/?utm_source=Fragmented%20Podcast&amp;utm_medium=Fragmented&amp;utm_campaign=Fragmented%20Podcast&amp;utm_content=no%20commitment%20free%20trial\">Kobiton.com/fragmented</a> and let them know we sent you.</p>\n<h2>Contact</h2>\n<ul>\n<li><a href=\"https://twitter.com/fragmentedcast\">@fragmentedcast</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/donnfelker\">@donnfelker</a> and <a href=\"https://plus.google.com/+DonnFelker\">+DonnFelker</a></li>\n<li><a href=\"https://twitter.com/kaushikgopal/\">@kaushikgopal</a> and <a href=\"https://plus.google.com/+KaushikGopalIsMe\">+KaushikGopalIsMe</a></li>\n</ul>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/64eea16c-db61-4b69-86ec-c5996ce93c25/093-dan-lew-interview_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}