{
    "Id": "65-E8-3E-EC-85-8B-DF-17-1E-8E-CF-34-03-8E-9B-63-B0-1E-7D-F7-51-77-E7-05-7B-CB-74-45-8E-18-5D-B8",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "005: Image libraries for Android",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>In this episode of Fragmented, Donn and Kaushik\u00a0start off by discussing the tips and tricks available for efficiently loading images in an Android app. Good image libraries make use of these techniques and perform all the heavy lifting in the background. So they then discuss\u00a0the different image library options available for Android developers.</p>\n<h2>Show Notes</h2>\n<h3>Techniques/tips on effective image rendering in Android:</h3>\n<h3>Bitmap sizes and allocation:</h3>\n<ul>\n<li><a href=\"http://developer.android.com/training/displaying-bitmaps/index.html\">Displaying bitmaps efficiently</a>\u00a0[developer.android.com]</li>\n<li><a href=\"http://developer.android.com/reference/android/graphics/Bitmap.Config.html\">RGB_565, ARGB_888 and other different bitmap configurations</a>[developer.android.com]</li>\n<li><a href=\"https://developer.android.com/reference/android/hardware/camera2/package-summary.html\">Android Camera2 apis</a>\u00a0[developer.android.com]</li>\n<li><a href=\"https://www.youtube.com/watch?v=rsQet4nBVi8\">Chet Haase DevByte : Bitmap allocation</a>\u00a0[youtube.com] (bitmaps managed in Dalvik heap post 3.0; so large bitmaps implies large heap implies GC could happen more often)</li>\n</ul>\n<h3>Reuse bitmaps:</h3>\n<ul>\n<li><a href=\"https://developer.android.com/training/displaying-bitmaps/manage-memory.html#inBitmap\">inBitmap option for Android 3.0 and later</a>\u00a0[developer.android.com]</li>\n<li><a href=\"http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inBitmap\">before Android 4.4 only equal sized bitmaps with inSampleSize 1 supported</a>[developer.android.com]</li>\n<li><a href=\"http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inBitmap\">Reusing bitmap objects on Android</a>[booking.com]</li>\n</ul>\n<h3>Downsample bitmaps</h3>\n<ul>\n<li><a href=\"http://developer.android.com/training/displaying-bitmaps/load-bitmap.html#load-bitmap\">Load a scaled down version into memory</a>\u00a0[developer.android.com]\n<ul>\n<li>see code for calculateInSampleSize</li>\n</ul>\n</li>\n</ul>\n<h3>Caching</h3>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Cache_algorithms#Examples\">Cache Algorithms - see LruCache</a>\u00a0[wikipedia.org]</li>\n<li><a href=\"http://developer.android.com/reference/android/util/LruCache.html\">LruCache object in Android</a>\u00a0[developer.android.com]</li>\n<li><a href=\"https://github.com/JakeWharton/DiskLruCache\">JakeWharton DiskLruCache</a>\u00a0[github.com]</li>\n<li><a href=\"http://developer.android.com/training/displaying-bitmaps/cache-bitmap.html\">Don\u2019t use Soft or Weak References for your Caches</a>\u00a0[developer.android.com]</li>\n<li><a href=\"https://plus.google.com/+AndroidDevelopers/posts/QMoo7zV3dzP\">Android Performance Pattern DevByte - why 60fps</a>\u00a0[youtube.com]</li>\n</ul>\n<h2>Image libraries for Android:</h2>\n<ul>\n<li><a href=\"http://square.github.io/picasso/\">Picasso</a>\u00a0by Square [github.com]\n<ul>\n<li><a href=\"https://github.com/square/picasso/blob/master/CHANGELOG.md#version-250-2015-02-06\">fetch introduced in V 2.5.0 (Changelog)</a>\u00a0[github.com]</li>\n<li><a href=\"https://github.com/square/picasso/issues/114\">Picasso doesn\u2019t</a>\u00a0do bitmap recycling</li>\n<li><a href=\"https://github.com/square/picasso/issues/672\">Jake Wharton\u2019s thoughts on Picasso not having a bitmap pool</a>\u00a0[github.com]</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/bumptech/glide\">Glide</a>\u00a0[github.com]\n<ul>\n<li><a href=\"https://github.com/bumptech/glide/issues/73\">github issue where author explains tags being used to store metadata</a>[github.com]</li>\n<li>Glide\u00a0 <a href=\"https://github.com/bumptech/glide/wiki/Resource-re-use-in-Glide\">does bitmap recycling</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/koush/ion\">Ion</a>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=yIMltNEAKZY\">DeepZoom with Ion</a>\u00a0[youtube.com]</li>\n<li><a href=\"http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html\">Uses BitmapRegionDecoder to implement DeepZoom</a>[developer.android.com]</li>\n</ul>\n</li>\n<li><a href=\"http://developer.android.com/training/volley/index.html\">Volley</a>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=yhv8l9F44qo\">Ficus Kirkpatrick introduces Volley in Google.IO</a>\u00a0[youtube.com]</li>\n<li><a href=\"http://stackoverflow.com/questions/19396852/volley-image-caching\">Doesn\u2019t come with an image caching mechansim out of the box</a>[stackoverflow.com]</li>\n</ul>\n</li>\n<li><a href=\"http://frescolib.org/\">Fresco</a>\n<ul>\n<li><a href=\"https://code.facebook.com/posts/366199913563917/introducing-fresco-a-new-image-library-for-android/\">Introducing Fresco</a>\u00a0[code.facebook.com]</li>\n<li><a href=\"https://twitter.com/romainguy/status/581241987656880128\">Romain Guy concern over native api call</a>\u00a0[twitter.com]</li>\n</ul>\n</li>\n<li>Other noteworthies that we did not discuss:\n<ul>\n<li><a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\">Universal Image Loader</a>\u00a0Library comparisons by others:</li>\n</ul>\n</li>\n<li><a href=\"http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en\">Picasso vs Glide</a>\u00a0[inthecheesefactory.com]</li>\n</ul>\n<h2>Image library comparisons:</h2>\n<ul>\n<li><a href=\"https://twitter.com/jessewilson/status/581235604740042752\">JesseWilson on Picasso vs Fresco :P</a>\u00a0[twitter.com]</li>\n<li><a href=\"https://twitter.com/jessewilson/status/581422137463992320\">JesseWilson Picasso:Glide :: Coke:Pepsi</a>\u00a0[twitter.com]</li>\n<li><a href=\"https://plus.google.com/103583939320326217147/posts/bfAFC5YZ3mq%20Bitmap%20reuse%20%28not%20done%20in%20Picasso%29\">Image comparisons by Koushik Dutta</a>\u00a0[plus.google.com]</li>\n<li><a href=\"https://www.bignerdranch.com/blog/solving-the-android-image-loading-problem-volley-vs-picasso/\">Volley vs Picasso\u00a0</a>[bignerdranch.com]</li>\n</ul>\n<h2>Awesome picks:</h2>\n<ul>\n<li>Donn\n<ul>\n<li><a href=\"https://github.com/square/moshi\">Moshi\u00a0- A new modern JSON library for Android and Java from the Square guys</a></li>\n<li><a href=\"http://www.jsonschema2pojo.org/\">JsonSchemaToPojo: Take json or a json schema and turn it into POJOs.</a></li>\n<li><a href=\"http://www.parcelabler.com/\">Parcelabler: Generate Parcelable implementations with a click of a button</a></li>\n<li><a href=\"https://github.com/johncarl81/parceler\">Parceler: Android parcels created through Code generation</a></li>\n</ul>\n</li>\n<li>KG:\n<ul>\n<li><a href=\"http://blog.paralleluniverse.co/2014/05/01/modern-java/\">Not your father's Java: 3 part blog post series An opinionated guide to modern Java development</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iyXpdkqBsG8\">Stetho caster.io screencast:\u00a0Debugging Android with Stetho - Donn\u2019sscreencast</a></li>\n<li><a href=\"http://cleartones.net/\"><em>Cleartones</em></a> <a href=\"http://cleartones.net/\"><em>: professional ringtones!</em></a></li>\n</ul>\n</li>\n</ul>\n<h2>Contact</h2>\n<h3>Donn Felker</h3>\n<ul>\n<li>@donnfelker [<a href=\"https://twitter.com/donnfelker\">twitter.com</a>]</li>\n<li><a href=\"http://www.donnfelker.com/\">donnfelker.com</a></li>\n</ul>\n<h3>Kaushik Gopal</h3>\n<ul>\n<li>@kaushikgopal [<a href=\"https://twitter.com/kaushikgopal/\">twitter.com</a>]</li>\n<li><a href=\"http://kaush.co/\">kaush.co</a></li>\n</ul>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/15339bfa-0053-4a2d-8ffe-5d8235092ac3/ep-5-fragmented_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}