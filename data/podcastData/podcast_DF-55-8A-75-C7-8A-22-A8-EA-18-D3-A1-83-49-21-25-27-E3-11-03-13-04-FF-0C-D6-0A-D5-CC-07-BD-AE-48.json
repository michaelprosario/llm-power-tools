{
    "Id": "DF-55-8A-75-C7-8A-22-A8-EA-18-D3-A1-83-49-21-25-27-E3-11-03-13-04-FF-0C-D6-0A-D5-CC-07-BD-AE-48",
    "ContentSourceId": "ee3f8f9f-8c83-488e-aada-ce09bc743a17",
    "Title": "Column by your name: The analytics database that skips the rows",
    "SourceUrl": "https://stackoverflow.blog/podcast/",
    "Description": "<p>These days, every company looking at analyzing their data for insights has a data pipeline setup. Many companies have a fast production database, often a NoSQL or key-value store, that goes through a data pipeline.The pipeline process performs some sort of extract-transform-load process on it, then routes it to a larger data store that the analytics tools can access. But what if you could skip some steps and speed up the process with a database purpose-built for analytics?</p><p>On this sponsored episode of the podcast, we chat with Rohit (Ro) Amarnath, the CTO at <a href=\"https://www.vertica.com/\">Vertica</a>, to find out how your analytics engine can speed up your workflow. After a humble beginning with a ZX Spectrum 128, he\u2019s now in charge of Vertica Accelerator, a SaaS version of the Vertica database.\u00a0</p><p>Vertica was founded by database researcher Dr. Michael Stonebreaker and Andrew Palmer. Dr. Stonebreaker helped develop several databases, including Postgres, Streambase, and VoltDB. Vertica was born out of research into purpose-built databases. Stonebreaker\u2019s <a href=\"http://www.csail.mit.edu/user/1547\">research</a> found that columnar database storage was faster for data warehouses because there were fewer read/writes per request.\u00a0</p><p>Here\u2019s a quick example that shows how columnar databases work. Suppose that you want all the records from a specific US state or territory. There are 52 possible values here (depending on how you count territories). To find all instances of a single state in a row-based DB, the search must check every row for the value of the state column. However, searching by column is faster by an order of magnitude: it just runs down the column to find matching values, then retrieves row data for the matches.\u00a0</p><p>The Vertica database was designed specifically for analytics as opposed to transactional databases. Ro spent some time at a Wall Street firm building reports\u2014P&L, performance, profitability, etc. Transactions were important to day-to-day operations, but the real value of data came from analyses that showed where to cut costs or increase investments in a particular business. Analytics help with overall strategy, which tends to be more far-reaching and effective.\u00a0</p><p>For most of its life, Vertica has been an on-premises database managing a data warehouse. But with the ease of cloud storage, Vertica Accelerator is looking to give you a data lake as a service. If you\u2019re unfamiliar, data lakes take the data warehouse concept\u2014central storage for all your data\u2014and remove limits. You can have \u201crivers\u201d of data flowing into your stores; if you go from a terabyte to a petabyte overnight, your cloud provider will handle it for you.\u00a0</p><p>Vertica has worked with plenty of industries that push massive amounts of data: healthcare, aviation, online games. They\u2019ve built a lot of functionality into the database itself to speed up all manner of applications. One of their prospective customers had a machine learning model with thousands of lines of code that was reduced to about ten lines because so much was being done in the database itself.\u00a0</p><p>In the future, Vertica plans to offer more powerful management of data warehouses and lakes, including handling the metadata that comes with them. To learn more about Vertica\u2019s analytics databases, check out our conversation or visit their <a href=\"https://www.vertica.com/product/vertica-accelerator/\">website</a>.</p>\n",
    "EnclosureUrl": "https://pdrl.fm/c28362/injector.simplecastaudio.com/6fa1d34c-502b-4abf-bd82-483804006e0b/episodes/03711bb5-ca3e-4bb7-b5c8-cf3bc6724ee2/audio/128/default.mp3?aid=rss_feed&awCollectionId=6fa1d34c-502b-4abf-bd82-483804006e0b&awEpisodeId=03711bb5-ca3e-4bb7-b5c8-cf3bc6724ee2&feed=XA_851k3"
}