{
    "Id": "DB-E4-A0-81-F7-94-95-B5-2C-A3-BC-AF-1D-5E-D3-7E-4B-69-8A-59-46-03-9A-E4-7C-36-C4-40-7B-D2-89-44",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "019: Effective Java for Android developers : Item 4",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>Singer and Android developer Donn Felker explores Joshua Bloch's fourth Item: <strong>Enforce noninstantiability with a private constructor</strong>.</p>\n<p>Stay tuned, cause we got more of these quick ones coming.</p>\n<ul>\n<li><a href=\"http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/?tag=httpkaushco-20\">Effective Java (2nd Edition) - Joshua Bloch</a></li>\n</ul>\n<p><strong>Enforce noninstantiability with a private constructor</strong>.</p>\n<p>Examples where you don't want class to be instantiated</p>\n<ol>\n<li>class that groups static methods and static fields (Util like classes think java.lang.Math/java.util.Arrays)</li>\n<li>class that groups static methods (including factory methods) for objects implementing specific interfaces (think java.util.Collections)</li>\n<li>class that group methods on a final class (vs. extending the class)</li>\n</ol>\n<p>Considerations</p>\n<ul>\n<li>Makes no sense to instantiate such &quot;Util&quot; classes</li>\n<li>Private constructors prevent instantiation</li>\n<li>Important side effect: prevents subclassing</li>\n</ul>\n<h2>Contact us:</h2>\n<ul>\n<li><a href=\"https://twitter.com/fragmentedcast\">@fragmentedcast</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/donnfelker\">@donnfelker</a> [twitter.com]</li>\n<li><a href=\"https://twitter.com/kaushikgopal/\">@kaushikgopal</a> [twitter.com]</li>\n</ul>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/70e3e9d3-9bf8-4e6c-94d3-35780f4f42dd/ep-19_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}