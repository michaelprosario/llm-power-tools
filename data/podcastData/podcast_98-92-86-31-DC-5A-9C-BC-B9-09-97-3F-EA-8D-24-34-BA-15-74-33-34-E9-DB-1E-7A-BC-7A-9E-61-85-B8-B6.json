{
    "Id": "98-92-86-31-DC-5A-9C-BC-B9-09-97-3F-EA-8D-24-34-BA-15-74-33-34-E9-DB-1E-7A-BC-7A-9E-61-85-B8-B6",
    "ContentSourceId": "7c098d5f-afc6-488d-b7ac-b49867303173",
    "Title": "Devs and Ops: Can This Marriage Be Saved?",
    "SourceUrl": "https://thenewstack.simplecast.com/episodes/devs-and-ops-can-this-marriage-be-saved-6WOQHKkX",
    "Description": "<p>DETROIT \u2014 Are we still shifting left? Is it realistic to expect developers to take on the burdens of security and infrastructure provisioning, as well as writing their applications? Is platform engineering the answer to saving the DevOps dream?</p><p>\u00a0</p><p>Bottom line: Do Devs and Ops really talk to each other \u2014 or just passive-aggressively swap Jira tickets?</p><p>\u00a0</p><p>These are some of the topics explored by a panel, \u201cDevs and Ops People: It\u2019s Time for Some Kubernetes Couples Therapy,\u201d convened by The New Stack at KubeCon + CloudNativeCon North America, here in the Motor City, on Thursday.</p><p>\u00a0</p><p>Panelists included <a href=\"https://www.linkedin.com/in/saad-a-malik\">Saad Malik,</a> chief technology officer and co-founder of Spectro Cloud; <a href=\"https://www.linkedin.com/in/viktorfarcic/\">Viktor Farcic,</a> developer advocate at Upbound; <a href=\"https://www.linkedin.com/in/lizrice/\">Liz Rice,</a> chief open source officer at Isolalent, and <a href=\"https://www.linkedin.com/in/aeris-stewart-%F0%9F%8C%88-083487187/\">Aeris Stewart,</a> community manager at Humanitec.</p><p>\u00a0</p><p>The latest TNS pancake breakfast was hosted by <a href=\"https://thenewstack.io/author/alex/\">Alex Williams,</a> The New Stack\u2019s founder and publisher, with <a href=\"https://thenewstack.io/author/hjoslyn/\">Heather Joslyn,</a> TNS features editor, fielding questions from the audience. The event was sponsored by Spectro Cloud.</p><p>\u00a0</p><h2>Alleviating Cognitive Load for Devs</h2><p>\u00a0</p><p>A big pain point in the DevOps structure \u2014 the marriage of frontend and backend in cross-functional teams \u2014 is that all devs aren\u2019t necessarily willing or able to take on all the additional responsibilities demanded of them.</p><p>\u00a0</p><p>A lot of organizations have \u201ccopy-pasted this one size fits all approach to DevOps,\u201d said Stewart.</p><p>\u00a0</p><p>\u201cIf you look at the tooling landscape, it is rapidly growing not just in terms of the volume of tools, but also the complexity of the tools themselves,\u201d they said. \u201cAnd developers are in parallel expected to take over an increasing amount of the software delivery process. And all of this, together, is too much cognitive load for them.\u201d</p><p>\u00a0</p><p>This situation also has an impact on operations engineers, who must help alleviate developers\u2019 burdens. \u201cIt\u2019s causing a lot of inefficiencies of these organizations,\u201d they added, \u201cand a lot of the same inefficiencies that DevOps was supposed to get rid of.\u201d</p><p>\u00a0</p><p><a href=\"https://thenewstack.io/devops-is-dead-embrace-platform-engineering/\">Platform engineering</a> \u2014\u00a0in which operations engineers provide devs with an internal developer platform that abstracts away some of the complexity \u2014\u00a0is \u201ca sign of hope,\u201d Stewart said, for organizations for whom DevOps is proving tough to implement.</p><p>\u00a0</p><p>The concept behind DevOps is \u201cabout making teams self-sufficient, so they have full control of their application, right from the idea until it is running in production,\u201d said Farcic.</p><p>\u00a0</p><p>But, he added, \u201cyou cannot expect them to have 17 years of experience in Kubernetes, and AWS and whatnot. And that's where platforms come in. That's how other teams, who have certain expertise, provide services so that those \u00a0\u2026 developers and operators can actually do the work that they're supposed to do, just as operators today are using services from AWS to do their work. So what AWS for Ops is to Ops, to me, that's what internal developer platforms are to application developers.\u201d</p><p>\u00a0</p><h2>Consistency vs. Innovation</h2><p>\u00a0</p><p>Platform engineering has been a hot topic in DevOps circles (and at KubeCon) but the definition remains a bit fuzzy, the panelists acknowledged. (\u201cIn a lot of organizations, \u2018platform engineering\u2019 is just a fancy new way of saying \u2018Ops,\u2019\u201d said Rice.)</p><p>\u00a0</p><p>The audience served up questions to the panel about the limits of the DevOps model and how platform engineering fits into that discussion. One audience member asked about balancing the need to provide a consistent platform to an organization\u2019s developers while also allowing devs to customize and innovate.</p><p>\u00a0</p><p>Malik said that both consistency and innovation are possible in a platform engineering structure. \u00a0 \u201cAn organization will decide where they want to be able to provide that abstraction,\u201d he said, adding, \u201cWhen they think about where they want to be as a whole, they could think about, Hey, when we provide our platform, we're going to be providing everything from security to CI/CD from GitHub, from repository management, this is what you will get if you use our IDP or platform itself.</p><p>\u00a0</p><p>But \u201cthere are going to be unique use cases,\u201d Malik added, such as developers who are building a <a href=\"https://thenewstack.io/open-source-blockchain-development-strong-despite-funding-cuts/\">new blockchain technology</a> or running <a href=\"https://thenewstack.io/what-is-webassembly/\">WebAssembly.</a></p><p>\u00a0</p><p>\u201cI think it's okay to give those development teams the ability to run their own platform, as long as you tell them, these are the areas that you have to be responsible for,\u201d he said. \u201c You're responsible for your own security, your own backup, your own retention capabilities.\u201d</p><p>\u00a0</p><p>One audience member mentioned <a href=\"https://teamtopologies.com/book\">\u201cTeam Topologies,\u201d</a> a 2019 engineering management book by <a href=\"https://www.linkedin.com/in/manuelpais\">Manuel Pais</a> and <a href=\"https://www.linkedin.com/in/matthewskelton\">Matthew Skelton</a>, and asked the panel if platform engineering is related to DevOps in that it\u2019s more of an approach to engineering management than a destination.</p><p>\u00a0</p><p>\u201cPlatform engineering is in the budding stage of its evolution,\u201d said Stewart. \u201cAnd right now, it's really focused on addressing the problems that organizations ran into when they were implementing DevOps.</p><p>\u00a0</p><p>They added, \u201cI think as we see the community come together more and get more best practices about how to develop platform, you will see it become more than just a different approach to DevOps and become something more distinct. But I don't think it's there quite yet.\u201d</p><p>\u00a0</p><p>Check out the full panel discussion to hear more from our DevOps \u201ccounseling session.\u201d</p>\n",
    "EnclosureUrl": "https://afp-922713-injected.calisto.simplecastaudio.com/5672b58f-7201-4e0e-b0af-da702259d97f/episodes/c5ca980e-f5a2-4478-95be-84d53004bc5c/audio/128/default.mp3?aid=rss_feed&awCollectionId=5672b58f-7201-4e0e-b0af-da702259d97f&awEpisodeId=c5ca980e-f5a2-4478-95be-84d53004bc5c&feed=IgzWks06"
}