{
    "Id": "6C-04-AC-C3-42-B5-FE-40-80-1B-75-A8-A9-32-DF-6F-13-14-7B-CC-0A-C7-52-E0-0F-02-59-B1-20-BA-BD-D4",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "148: Evolving Android architectures (Part 1)",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>In this episode, Donn and Kaushik talk about the state of android architectures and how they've stared to evolve. Kaushik recently worked on a project of coming up with an evolved version of an MVVM architecture, very similar to what the Android community now calls MVI.</p>\n<p>Special request: if you have follow up questions or clarifications or things you'd like to see specifically with respect to this dicussion, hit us up on the <a href=\"https://discord.gg/zBSfhwk\">Discord #fragmented-podcast channel</a> with your thoughts and we'll make sure to address them in future parts!</p>\n<h2>Shownotes</h2>\n<ul>\n<li><a href=\"https://speakerdeck.com/kaushikgopal/unidirectional-state-flow-patterns-a-refactoring-story\">MBLT-Dev talk by KG : Unidirectional state flow patterns - a refactoring story</a></li>\n<li><a href=\"http://github.com/kaushikgopal/movies-usf/\">github sample repo with this pattern</a></li>\n</ul>\n<h3>Salient features of the pattern:</h3>\n<p>I. Screens are driven by a single ViewModel<br />\nII. Screens listen to a single Observable exposed from the ViewModel<br />\nIII. Screens listen to a single Observable exposed from the ViewModel<br />\nIV. Events are sent into the VM through a single function processInputs<br />\nV. Break(ing) the Chain<br />\nVI. Testing strategy</p>\n<h3>Inspiration</h3>\n<ul>\n<li><a href=\"https://jakewharton.com/the-state-of-managing-state-with-rxjava/\">The state of managing state with RxJava</a></li>\n<li><a href=\"http://fragmentedpodcast.com/episodes/103/\">MVI patterns with Hannes Dorfmann</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering/introducing-mvrx-android-on-autopilot-552bca86bd0a\">MVRx</a></li>\n</ul>\n<h2>Sponsors \ud83d\ude4f</h2>\n<ul>\n<li>\n<p><a href=\"https://nevercode.io\">Nevercode</a></p>\n<ul>\n<li>Nevercode is taking Flutter revolution extremely serious and is prepared to offer kick-ass CI/CD for Flutter projects with <a href=\"https://codemagic.io/\">codemagic.io</a>. Check it out and get started at https://codemagic.io/</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://sentry.io/for/android/\">Sentry.io</a></p>\n<ul>\n<li>Sentry tells you about errors in your code before your customers have a chance to encounter them.<br />\nCheck them out at: https://sentry.io/for/android/</li>\n</ul>\n</li>\n</ul>\n<h2>Contact</h2>\n<ul>\n<li><a href=\"https://discord.gg/zBSfhwk\">Discord chat</a> or <a href=\"https://twitter.com/fragmentedcast\">@fragmentedcast</a> or <a href=\"https://www.youtube.com/channel/UC7fT84G-G25w7Bdd-e1rnyw/videos\">our Youtube channel</a></li>\n<li><a href=\"https://twitter.com/donnfelker\">@donnfelker</a> and <a href=\"https://www.instagram.com/donnfelker/\">donnfelker</a> (on Instagram)</li>\n<li><a href=\"https://twitter.com/kaushikgopal\">@kaushikgopal</a> and <a href=\"https://www.instagram.com/kaushikgopal/\">kaushikgopal</a> (on Instagram)</li>\n</ul>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/e679ae38-2f8a-4988-888a-7b66c57f82a1/148-android-features_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}