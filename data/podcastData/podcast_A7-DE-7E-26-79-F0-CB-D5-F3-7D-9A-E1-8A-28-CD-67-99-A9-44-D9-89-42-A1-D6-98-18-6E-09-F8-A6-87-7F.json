{
    "Id": "A7-DE-7E-26-79-F0-CB-D5-F3-7D-9A-E1-8A-28-CD-67-99-A9-44-D9-89-42-A1-D6-98-18-6E-09-F8-A6-87-7F",
    "ContentSourceId": "6211f1c3-8dc3-4bf8-a824-be7c8b79d101",
    "Title": "165: Learning Kotlin: Lambda Expressions Part 1",
    "SourceUrl": "https://fragmentedpodcast.com/",
    "Description": "<p>In this episode, Donn talks about Kotlin Lambda Expressions. He explains the syntax and how to build a couple of simple lambda expressions with and without type inference and declaration. We wrap up with a small example of passing a small lambda with multiple values to a function. See the show notes below for more info. This is part 1 of a multi-part series on Lambda Expressions in Kotlin.</p>\n<p>The basic syntax of a lambda expression:</p>\n<pre><code class=\"language-kotlin\">val myLambda : Type = { argumentList -&gt; codeBody }\n</code></pre>\n<p>The codeBody is the only section that is not optional.</p>\n<p>Double lambda expression (doubles an integer) with type inference</p>\n<pre><code class=\"language-kotlin\">val double = { number: Int -&gt; number * 2 }\nval result = double(4)\n// result = 8 now\n</code></pre>\n<p>Double string multi-line lambda with type inference.</p>\n<pre><code class=\"language-kotlin\">val doubleString = { number: Int -&gt; \n\t// codebody\n\tval doubleResult = number * 2\n\tdoubleResult.toString() \n\t// Kotlin knows this will return a string\n}\n</code></pre>\n<p>Type declaration in a lambda</p>\n<pre><code class=\"language-kotlin\">val myLambda: (String, Int) -&gt; String  = { str, int -&gt; \n\t&quot;$str - ${int.toString()}&quot; // &quot;Donn - 32&quot; \n}\nval result = myLambda(&quot;Donn&quot;, 32)\n// result = &quot;Donn - 32&quot;\n</code></pre>\n<p>Preview of next week \u2026 passing a lambda to a  function</p>\n<pre><code class=\"language-kotlin\">fun doWork(name: String, favoriteNumber: Int, someLambda: (String, Int) -&gt; String) {\n    // Do some processing, this is a contrived example\n    val repeatedString = &quot;$name$name&quot;\n    val result = someLambda(repeatedString, favoriteNumber)\n    println(result)\n}\n\n// Usage\ndoWork(&quot;Donn&quot;, 32) { str, int -&gt;\n    val someNewValue = &quot;$str is my parameter and so is $int&quot;\n    someNewValue.length.toString() // this is returned\n}\n\n// '37' is printed via println\n\n// Or use it like this, the lambda code body is what can change, this is where the power is at\ndoWork(&quot;Donn&quot;, 32) { name, count -&gt;\n    var result = &quot;&quot;\n    for(i in 1..count)  { result += &quot;$name&quot; }\n    result // this is returned\n}\n\n// loops over and concatinates &quot;Donn&quot; until the favorite number (aka count) is met. \n// Output looks like: &quot;DonnDonnDonnDonnDonnDonn...&quot; and so on... \n\n</code></pre>\n",
    "EnclosureUrl": "https://cdn.simplecast.com/audio/20f350/20f35050-e836-44cd-8f7f-fd13e8cb2e44/9667b3d9-010e-4eae-9de7-8737c4bc1059/fragmented-ef-java-17-final_tc.mp3?aid=rss_feed&feed=LpAGSLnY"
}