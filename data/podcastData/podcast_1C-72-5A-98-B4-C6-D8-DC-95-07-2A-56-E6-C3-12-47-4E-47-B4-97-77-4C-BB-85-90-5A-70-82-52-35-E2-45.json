{
    "Id": "1C-72-5A-98-B4-C6-D8-DC-95-07-2A-56-E6-C3-12-47-4E-47-B4-97-77-4C-BB-85-90-5A-70-82-52-35-E2-45",
    "ContentSourceId": "ee3f8f9f-8c83-488e-aada-ce09bc743a17",
    "Title": "Building out a managed Kubernetes service is a bigger job than you think",
    "SourceUrl": "https://stackoverflow.blog/podcast/",
    "Description": "<p>You may be running your code in containers. You might even have taken the plunge and orchestrated it all with YAML code through Kubernetes. But infrastructure as code becomes a whole new level of complicated when setting up a managed Kubernetes service.\u00a0</p><p>On this sponsored episode of the Stack Overflow podcast, Ben and Ryan talk with David Dymko and Walt Ribeiro of Vultr about what they went through to build their managed Kubernetes service as a cloud offering. It was a journey that ended not just with a managed K8s service, but also with a wealth of additional tooling, upgrades, and open sourcing.\u00a0</p><p>When building out a Kubernetes implementation, you can abstract away some of the complexity, especially if you use some of the more popular tools like <a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/\">Kubeadm</a> or <a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubespray/\">Kubespray</a>. But when using a managed service, you want to be able to focus on your workloads and only your workloads, which means taking away the control plane. The user doesn\u2019t need to care about the underlying infrastructure, but for those designing it, the missing control plane opens a whole heap of trouble.\u00a0</p><p>Once you remove this abstraction, your cloud cluster is treated as a single solid compute. But then how do you do upgrades? How do you maintain x509 certifications for HTTPS calls? How do you get metrics? Without the control plane, Vultr needed to communicate to their Kubernetes worker nodes through the API. And wouldn\u2019t you know it: the API isn\u2019t all that well-documented.\u00a0</p><p>They took it back to bare necessities, the MVP feature set of their K8s cloud service. They\u2019d need the <a href=\"https://kubernetes.io/docs/concepts/architecture/cloud-controller/\">Cloud Controller Manager (CCM)</a> and the <a href=\"https://kubernetes-csi.github.io/docs/\">Container Storage Interface (CSI)</a> as core components to have Vultr be a first-class citizen on a Kubernetes cluster. They built a Go client to interface using those components and figured, hey, why not open-source this? That led to a few other open-source projects, like a Terraform integration and a command-line interface.\u00a0</p><p>This was the start of a two-year journey connecting all the dots that this project required. They needed a managed load balancer that could work without the control plane or any of the tools that interfaced with it. They built it. They needed a quality-of-life update to their API to catch up with everything that today\u2019s developer expects: modern CRUD actions, REST best practices, and pagination. All the while, they kept listening to their customers to make sure they didn\u2019t stray too far from the original product.\u00a0</p><p>To see the results of their journey, listen to the podcast and check out <a href=\"https://www.vultr.com/\">Vultr.com</a> for all of their cloud offerings, available in 25 locations worldwide.</p>\n",
    "EnclosureUrl": "https://pdrl.fm/c28362/injector.simplecastaudio.com/6fa1d34c-502b-4abf-bd82-483804006e0b/episodes/f19937db-9569-4524-80e5-0fc4421dad17/audio/128/default.mp3?aid=rss_feed&awCollectionId=6fa1d34c-502b-4abf-bd82-483804006e0b&awEpisodeId=f19937db-9569-4524-80e5-0fc4421dad17&feed=XA_851k3"
}