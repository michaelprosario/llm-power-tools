{
    "Id": "F6-07-82-95-2A-6F-9F-1E-BD-40-40-88-50-E0-AB-D9-08-D6-1A-65-E7-34-F4-DD-8C-EF-3B-2A-0E-06-25-CA",
    "ContentSourceId": "425b36ab-3b93-42c9-8cbc-032e3bddb1d6",
    "Title": "Selecting the Ideal Data Structure & Unravelling Python's \"pass\" and \"with\"",
    "SourceUrl": "https://realpython.com/podcasts/rpp/62/",
    "Description": "<p>How do you know you&rsquo;re using the correct data structure for your Python project? There are so many built into Python and even more that are importable from the collections module. This week on the show, David Amos is back, and he&rsquo;s brought another batch of PyCoder&rsquo;s Weekly articles and projects. We discuss a recent three-part video course on selecting the ideal data structure.</p>\n<p>Along with comparing the types of dictionaries, data records, arrays, stacks, and more, David covers a recent Real Python article about the namedtuple. This deep dive covers how to use the namedtuple to write cleaner code.</p>\n<p>We also discuss new articles from previous guest Brett Cannon. He has added two posts to his Python syntactic sugar series about unravelling the <code>pass</code> and <code>with</code> statement.</p>\n<p>We cover several other articles and projects from the Python community including, async in Flask 2.0, Python projects on Github that are examples of best practices and good architecture, how SpaceX sort of lands starship,  the new ti-84 calculator with Python, and building a Python spell checker.</p>\n<div class=\"alert alert-primary\" role=\"alert\">\n<p><strong>Spotlight:</strong> <a href=\"https://realpython.com/courses/stacks-queues-ideal-data-structure/\">Stacks and Queues: Selecting the Ideal Data Structure</a></p>\n<p>In this course, you&rsquo;ll learn about three of Python&rsquo;s data structures: stacks, queue and priority queues. You&rsquo;ll look at multiple types and classes for all of these and learn which implementations are best for your specific use cases.</p>\n</div>\n<p>Topics:</p>\n<ul>\n<li>00:00:00 &ndash; Introduction</li>\n<li>00:02:06 &ndash; Write Pythonic and Clean Code With namedtuple</li>\n<li>00:05:38 &ndash; Unravelling the pass Statement</li>\n<li>00:10:31 &ndash; Unravelling the with statement</li>\n<li>00:13:38 &ndash; Async in Flask 2.0</li>\n<li>00:19:04 &ndash; Sponsor: Digital Ocean&rsquo;s App Platform</li>\n<li>00:19:40 &ndash; Python Projects on Github That Are Examples of Best Practices and Good Architecture</li>\n<li>00:26:43 &ndash; How SpaceX Lands Starship (Sort Of)</li>\n<li>00:32:00 &ndash; Stacks and Queues: Selecting the Ideal Data Structure</li>\n<li>00:38:34 &ndash; Video Course Spotlight</li>\n<li>00:40:39 &ndash; Texas Instruments To Release New TI-84 Calculator With Python</li>\n<li>00:44:23 &ndash; spylls: Python spell checker</li>\n<li>00:47:36 &ndash; Thanks and goodbye</li>\n</ul>\n<p>Show Links:</p>\n<p><a href=\"https://realpython.com/python-namedtuple/\">Write Pythonic and Clean Code With namedtuple</a> &ndash; In this step-by-step tutorial, you&rsquo;ll learn what Python&rsquo;s namedtuple is and how to use it in your code. You&rsquo;ll also learn about the main differences between named tuples and other data structures, such as dictionaries, data classes, and typed named tuples.</p>\n<p><a href=\"https://snarky.ca/unravelling-the-pass-statement/\">Unravelling the pass Statement</a> &ndash; When you need to indicate that a bit of code intentionally does nothing, then you need to reach for Python&rsquo;s <code>pass</code> statement. In the latest installment of Brett&rsquo;s &ldquo;Syntactic Sugar&rdquo; series, you&rsquo;ll learn how <code>pass</code> works, when to use it, and why it&rsquo;s a uniquely Python concept.</p>\n<p><a href=\"https://snarky.ca/unravelling-the-with-statement/\">Unravelling the with statement</a></p>\n<p><a href=\"https://testdriven.io/blog/flask-async/\">Async in Flask 2.0</a> &ndash; This article looks at Flask 2.0&rsquo;s new async functionality and how to leverage it in your Flask projects. You&rsquo;ll learn how Flask processes requests asynchronously using a traditional WSGI server, instead of the ASGI server used by many other async web frameworks. You&rsquo;ll also learn how to simulate Flask 2.0 async in Flask 1.X applications.</p>\n<p><a href=\"https://old.reddit.com/r/learnpython/comments/n5a6fo/do_you_know_any_python_projects_on_github_that/\">Python Projects on Github That Are Examples of Best Practices and Good Architecture</a> &ndash; This Reddit thread is full of GitHub repos that might make for some good code reading.</p>\n<p><a href=\"https://thomas-godden.medium.com/how-spacex-lands-starship-sort-of-ee96cdde650b\">How SpaceX Lands Starship (Sort Of)</a> &ndash; While waiting for SN15 to launch, Thomas Goddard set out to pull together a 2-dimensional simulation of the Starship landing. Tying together knowledge of trajectory optimization, Thomas modeled the landing in Python with the <a href=\"https://web.casadi.org/\">CasADI library</a> and used Matplotlib to generate an animation which, when <a href=\"https://www.youtube.com/watch?v=6qj3EfRTtkE&amp;t=16s\">played side-by-side</a> with the footage of the landing, results in remarkable similarity to the actual landing dynamics.</p>\n<p><a href=\"https://realpython.com/courses/stacks-queues-ideal-data-structure/\">Stacks and Queues: Selecting the Ideal Data Structure</a> &ndash; Learn about three of Python&rsquo;s data structures: stacks, queue and priority queues. You&rsquo;ll look at multiple types and classes for all of these and learn which implementations are best for your specific use cases.</p>\n<p>Projects:</p>\n<ul>\n<li><a href=\"https://education.ti.com/en/products/calculators/graphing-calculators/ti-84-plus-ce-python\">Texas Instruments To Release New TI-84 Calculator With Python</a></li>\n<li><a href=\"https://github.com/zverok/spylls\">spylls</a></li>\n</ul>\n<p>Additional Links:</p>\n<ul>\n<li><a href=\"https://realpython.com/podcasts/rpp/47/\">Episode 47: Unraveling Python&rsquo;s Syntax to Its Core With Brett Cannon</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">Resource acquisition is initialization (RAII) - Wikipedia Article</a></li>\n<li><a href=\"https://snarky.ca/the-social-contract-of-open-source/\">The Social Contract of Open Source</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Xbl7XjFYsN4\">import asyncio: Learn Python&rsquo;s AsyncIO #1 - The Async Ecosystem &ndash; YouTube</a></li>\n<li><a href=\"https://twitter.com/davidism/status/1391130343286001664\">David Lord&rsquo;s Twitter Thread on Adding Type Annotations for Pallets Projects </a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/9/\">Episode 9: Leveling Up Your Python Literacy and Finding Python Projects to Study With Cecil Phillip</a></li>\n<li><a href=\"https://github.com/psf/requests\">requests: A simple, yet elegant, HTTP library</a></li>\n<li><a href=\"https://realpython.com/python-application-layouts/\">Python Application Layouts: A Reference &ndash; Real Python Article</a></li>\n<li><a href=\"https://github.com/tonybaloney/wily\">Wily: A command-line application for tracking, reporting on complexity of Python tests and applications</a></li>\n<li><a href=\"https://erpnext.com/\">ERPNext: Free and open source ERP</a></li>\n<li><a href=\"https://github.com/mozilla/kitsune\">Kitsune: Mozilla platform that powers SuMo (support.mozilla.org)</a></li>\n<li><a href=\"https://black.readthedocs.io/en/stable/\">Black: The uncompromising code formatter</a></li>\n<li><a href=\"http://aosabook.org/en/index.html\">The Architecture of Open Source Applications</a></li>\n<li><a href=\"https://docs.python-guide.org/writing/reading/\">The Hitchhiker&rsquo;s Guide to Python: Reading Great Code</a></li>\n<li><a href=\"https://realpython.com/podcasts/rpp/27/\">Episode 27: Preparing for an Interview With Python Practice Problems With Jim Anderson</a></li>\n<li><a href=\"https://realpython.com/python-data-structures/\">Common Python Data Structures (Guide) &ndash; Real Python Article</a></li>\n<li><a href=\"https://realpython.com/queue-in-python/\">Python Stacks, Queues, and Priority Queues in Practice &ndash; Real Python Article</a></li>\n<li><a href=\"https://old.reddit.com/r/Python/comments/n6wt6y/do_you_also_use_the_python_console_and_the_python/\">Do You Use the Python Console and the Python Math Libraries as a Calculator?</a> </li>\n<li><a href=\"https://zverok.github.io/blog/2021-05-06-how-to-spellcheck.html\">I Forgot How to Spellcheck</a></li>\n<li><a href=\"http://hunspell.github.io/\">hunspell</a></li>\n</ul>\n<p>Level up your Python skills with our expert-led courses:</p>\n<ul>\n<li><a href=\"https://realpython.com/courses/records-sets-ideal-data-structure/\">Records and Sets: Selecting the Ideal Data Structure</a></li>\n<li><a href=\"https://realpython.com/courses/stacks-queues-ideal-data-structure/\">Stacks and Queues: Selecting the Ideal Data Structure</a></li>\n<li><a href=\"https://realpython.com/courses/dicts-arrays-ideal-data-structure/\">Dictionaries and Arrays: Selecting the Ideal Data Structure</a></li>\n</ul> <p><a rel=\"payment\" href=\"https://realpython.com/join\">Support the podcast &amp; join our community of Pythonistas</a></p>",
    "EnclosureUrl": "https://dts.podtrac.com/redirect.mp3/files.realpython.com/podcasts/RPP_E062_David_and_Chris2.f5d24920a387.mp3"
}