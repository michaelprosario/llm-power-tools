{
    "Id": "9B-87-11-62-36-A6-F4-22-AF-BD-B8-78-55-18-40-00-04-61-4F-6B-BE-63-19-85-95-F5-96-50-EF-F0-39-19",
    "ContentSourceId": "ee3f8f9f-8c83-488e-aada-ce09bc743a17",
    "Title": "A murder mystery: who killed our user experience?",
    "SourceUrl": "https://stackoverflow.blog/podcast/",
    "Description": "<p>The infrastructure that networked applications lives on is getting more and more complicated. There was a time when you could serve an application from a single machine on premises. But now, with cloud computing offering painless scaling to meet your demand, your infrastructure becomes abstracted and not really something you have contact with directly. Compound that problem with with architecture spread across dozens, even hundreds of microservices, replicated across multiple data centers in an ever changing cloud, and tracking down the source of system failures becomes something like a murder mystery. Who shot our uptime in the foot?\u00a0</p><p>A good observability system helps with that. On this sponsored episode of the Stack Overflow Podcast, we talk with Greg Leffler of Splunk about the keys to instrumenting an observable system and how the OpenTelemetry standard makes observability easier, even if you aren\u2019t using Splunk\u2019s product.\u00a0</p><p>Observability is really an outgrowth of traditional monitoring. You expect that some service or system could break, so you keep an eye on it. But observability applies that monitoring to an entire system and gives you the ability to answer the unexpected questions that come up. It uses three principal ways of viewing system data: logs, traces, and metrics.</p><p>Metrics are a number and a timestamp that tell you particular details. Traces follow a request through a system. And logs are the causes and effects recorded from a system in motion. Splunk wants to add a fourth one\u2014events\u2014that would track specific user events and browser failures.\u00a0</p><p>Observing all that data first means you have to be able to track and extract that data by instrumenting your system to produce it. Greg and his colleagues at Splunk are huge fans of OpenTelemetry. It\u2019s an open standard that can extract data for any observability platform. You instrument your application once and never have to worry about it again, even if you need to change your observability platform.\u00a0</p><p>Why use an approach that makes it easy for a client to switch vendors? Leffler and Splunk argue that it\u2019s not only better for customers, but for Splunk and the observability industry as a whole. If you\u2019ve instrumented your system with a vendor locked solution, then you may not switch, you may just let your observability program fall by the wayside. That helps exactly no one.\u00a0</p><p>As we\u2019ve seen, <a href=\"https://stackoverflow.blog/2021/09/02/pandemic-lockdowns-accelerated-cloud-migration-by-three-to-four-years/\">people are moving to the cloud</a> at an ever faster pace. That\u2019s no surprise; it offers automatic scaling for arbitrary traffic volumes, high availability, and worry-free infrastructure failure recovery. But moving to the cloud can be expensive, and you have to do some work with your application to be able to see everything that\u2019s going on inside it. Plenty of people just throw everything into the cloud and let the provider handle it, which is fine until they see the bill.</p><p>Observability based on an open standard makes it easier for everyone to build a more efficient and robust service in the cloud. Give the episode a listen and let us know what you think in the comments.</p>\n",
    "EnclosureUrl": "https://pdrl.fm/c28362/injector.simplecastaudio.com/6fa1d34c-502b-4abf-bd82-483804006e0b/episodes/a0c2cb6d-c508-4e6a-8ddc-293ecb09d5d0/audio/128/default.mp3?aid=rss_feed&awCollectionId=6fa1d34c-502b-4abf-bd82-483804006e0b&awEpisodeId=a0c2cb6d-c508-4e6a-8ddc-293ecb09d5d0&feed=XA_851k3"
}